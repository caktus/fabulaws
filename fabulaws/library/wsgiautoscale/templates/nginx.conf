# gunicorn server
upstream django_server {
    server 127.0.0.1:{{ server_port }} fail_timeout=0;
}

# log format for Logstash (add to access_log below if enabled):
#log_format  logstash_fmt  '$remote_addr $host $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $ssl_cipher $request_time';

server {
    listen 443;
    # Only match localhost and allowed_hosts from Django. All other requests will be
    # handled by the invalid request handler below.
    server_name{% for sn in allowed_hosts %} {{ sn }}{% endfor %} localhost 127.0.0.1;
    ssl on;
    ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
    ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;

    root {{ services }}/nginx/html;

    client_max_body_size 4G;

    keepalive_timeout 5;

    access_log {{ log_dir }}/access.log;
    error_log {{ log_dir }}/error.log;

    location / {
        {% if use_basic_auth.get(environment) %}
        auth_basic "Restricted";
        auth_basic_user_file "{{ passwdfile_path }}";

        location = /healthcheck.html {
            # Turn off basic auth for healthcheck
            auth_basic "off";
            # Abbreviated version of logic below to serve healthcheck.html (override) if it exists
            if (-f $request_filename) { break; }
            if (!-f $request_filename) { proxy_pass http://django_server; break; }
        }
        {% endif %}

        # set the same header as AWS ELB so SecureRequiredMiddleware picks it up
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_buffering off;
        proxy_read_timeout 30;
        proxy_connect_timeout 30;

        # rewrite hosts with trailing dot to non-dot version
        if ($http_host ~ "\.$" ){
            rewrite ^(.*) $scheme://$host$1 permanent;
        }

        # if the requested file exists in our document root, serve that above
        # all else (e.g., can be used to surve a 200 OK response for the health
        # check during system upgrades)
        if (-f $request_filename) {
            break;
        }
        # if the 503.html maintenance page exist, assume we're undergoing
        # maintenance and redirect all other requests there
        if (-f {{ services }}/nginx/html/503.html) {
            return 503;
            break;
        }
        # otherwise, pass the request to Django
        if (!-f $request_filename) {
            proxy_pass http://django_server;
            break;
        }
    }
    error_page 503 @maintenance;
    location @maintenance {
        rewrite ^(.*)$ /503.html break;
    }

    location /nginx_stub_status {
        stub_status on;
        allow 127.0.0.1;
        deny all;
    }
}

# specialized redirects for 'www' server names
{% for domain in site_domains %}
{% if not domain.startswith('.') %}
server {
    listen 80;
    server_name  www.{{ domain }};
    rewrite ^(.*) https://{{ domain }}$1 permanent;
}

server {
    listen 443;
    server_name  www.{{ domain }};
    ssl on;
    ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
    ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;
    rewrite ^(.*) https://{{ domain }}$1 permanent;
}
{% endif %}
{% endfor %}
# generic redirect for all valid, non-SSL server names
server {
    listen 80;
    server_name 127.0.0.1 localhost{% for sn in allowed_hosts %} {{ sn }}{% endfor %};
    server_name_in_redirect off;
    rewrite ^(.*) https://$host$1 permanent;
}

# For any requests using an invalid hostname, just return an empty response.
# This shields us from Django's 500 server errors in case of an invalid
# hostname.
server {
    listen 80 default_server;
    listen 443 default_server ssl;
    ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
    ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;
    server_name _; # will never match an actual hostname
    access_log {{ log_dir }}/invalid_request_access.log;
    error_log {{ log_dir }}/invalid_request_error.log;
    return 444;
}
