{% if current_role == 'web' %}
[program:{{ environment }}-server]
process_name=%(program_name)s
command={{ virtualenv_root }}/bin/newrelic-admin run-program {{ virtualenv_root }}/bin/gunicorn --bind="127.0.0.1:{{ server_port }}" --workers={{ worker_count }} --worker-class={{ worker_class }} {{ wsgi_app }} --timeout={{ timeout }}
directory={{ code_root }}
user={{ webserver_user }}
autostart=true
autorestart=true
stdout_logfile={{ log_dir }}/gunicorn.log
redirect_stderr=true
environment=NEW_RELIC_CONFIG_FILE='{{ services }}/newrelic-{{ environment }}-web.ini',DJANGO_SETTINGS_MODULE={{ settings_managepy }}

[group:{{ environment }}-web]
programs={{ environment }}-server
{% endif %}

{% if current_role == 'worker' %}
{% for workername, options in celery_workers.items() %}
[program:{{ environment }}-celeryd-{{ workername }}]
command={{ virtualenv_root }}/bin/newrelic-admin run-program {{ virtualenv_root }}/bin/celery worker --loglevel=INFO -E --pidfile=/tmp/{{ project }}-{{ environment }}-celeryd-{{ workername }}.pid --hostname=worker.{{ workername }}.%%h {{ options }}
directory={{ project_root }}
user={{ webserver_user }}
numprocs=1
autostart=true
autorestart=true
stdout_logfile={{ log_dir }}/celeryd-{{ workername }}.log
redirect_stderr=true
startsecs=10
; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 600
; if rabbitmq is supervised, set its priority higher
; so it starts first
priority=998
environment=NEW_RELIC_CONFIG_FILE='{{ services }}/newrelic-{{ environment }}-celery.ini',DJANGO_SETTINGS_MODULE={{ settings_managepy }}
{% endfor %}

[program:{{ environment }}-celerybeat]
command={{ virtualenv_root }}/bin/celery beat --schedule=/tmp/{{ project }}-{{ environment }}-celerybeat-schedule --loglevel=INFO --pidfile=/tmp/{{ project }}-{{ environment }}-celerybeat.pid
directory={{ project_root }}
user={{ webserver_user }}
numprocs=1
autostart=false
autorestart=true
stdout_logfile={{ log_dir }}/celerybeat.log
redirect_stderr=true
startsecs=10
; if rabbitmq is supervised, set its priority higher
; so it starts first
priority=999
environment=DJANGO_SETTINGS_MODULE={{ settings_managepy }}

[program:{{ environment }}-celerycam]
command={{ virtualenv_root }}/bin/celery events -l info --camera django_celery_monitor.camera.Camera --frequency=2.0 --pidfile=/tmp/{{ project }}-{{ environment }}-celerycam.pid
directory={{ project_root }}
user={{ webserver_user }}
numprocs=1
autostart=false
autorestart=true
stdout_logfile={{ log_dir }}/celerycam.log
redirect_stderr=true
startsecs=10
; if rabbitmq is supervised, set its priority higher
; so it starts first
priority=999
environment=DJANGO_SETTINGS_MODULE={{ settings_managepy }},PYTHONPATH={{ code_root }}

[group:{{ environment }}-celery]
programs={% for workername in celery_workers %}{{ environment }}-celeryd-{{ workername }},{% endfor %}{{ environment }}-celerybeat,{{ environment }}-celerycam
{% endif %}

[program:{{ environment }}-stunnel]
command=/usr/bin/stunnel4 {{ services }}/stunnel/{{ environment }}.conf
directory={{ home }}
user={{ webserver_user }}
numprocs=1
autostart=true
autorestart=true
stdout_logfile={{ log_dir }}/stunnel.log
redirect_stderr=true
startsecs=10
; if rabbitmq is supervised, set its priority higher
; so it starts first
priority=1000

[program:{{ environment }}-pgbouncer]
command=/usr/sbin/pgbouncer {{ services }}/pgbouncer/pgbouncer-{{ environment }}.ini
directory={{ home }}
user={{ webserver_user }}
numprocs=1
autostart=true
autorestart=true
stdout_logfile={{ log_dir }}/pgbouncer-stdout.log
redirect_stderr=true
startsecs=10
; if rabbitmq is supervised, set its priority higher
; so it starts first
priority=1001

; this group should be started on all servers
[group:{{ environment }}-pgbouncer]
programs={{ environment }}-stunnel,{{ environment }}-pgbouncer
